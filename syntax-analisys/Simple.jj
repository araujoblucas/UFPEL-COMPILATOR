PARSER_BEGIN(Simple)
import java.io.*;
public class Simple {

  public static void main(String args[]) throws ParseException,IOException {
    
 Simple parser = new Simple(new FileInputStream(args[0]));
 parser.Simple();
  }

}

PARSER_END(Simple)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENTESES:"(">
| <FPARENTESES:")">
| <PRINT: "print">
| <ATRIB: ":=">
| <PV: ";">
| <IF: "if">
| <WHILE: "while">
| <DO: "do">
| <RETURN: "return">
| <VAR: "var">
| <TIPO: ("int"|"bool"|"void"|"float")>
| <TRUE: "true">
| <FALSE: "false">
| <FUNC: "function">
| <VIRGULA: ",">
 | <TOKEN_ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])*(("_")*( ["a"-"z","A"-"Z","0"-"9"])+)*>
 | <TOKEN_NUMLITERAL:(["0"-"9"])+ ("."(["0"-"9"])+ )? ("E" ("+" | "-")? (["0"-"9"])+)?>
}

TOKEN :
{
 < OP: ("+" | "-" | "*" | "/" | "&&" | "||" | "<" | ">" | "==")>


}


// SIMPLE -> "main" "{" COMANDOS  "}"

void Simple () :
{}
{

<MAIN>
 <ACHAVES> 
 VarDecl()
 Comandos()
  <FCHAVES>
  (Func())?
<EOF> 

}

void VarDecl():
{}
{
  (<VAR> <TIPO> <TOKEN_ID> <PV>)*
}

// COMANDOS -> COM ";"  COMANDOS'

void Comandos () :
{}
{

 Com() <PV> ComandosL()

}

// COMANDOS'->   COM ";" COMANDOS' | epsilon

void ComandosL () :
{}
{

 ( Com()  <PV>  ComandosL())?

}



// COM -> id ":=" EXP | "print" "(" EXP ")"

void Com () :
{}
{

  (<TOKEN_ID> <ATRIB> Exp())
  | (<IF> <APARENTESES> Exp() <FPARENTESES> <ACHAVES> ComandosL() <FCHAVES>)
  | (<WHILE> <APARENTESES> Exp() <FPARENTESES> <DO> <ACHAVES> ComandosL() <FCHAVES>)
  | (<DO> <ACHAVES> ComandosL() <FCHAVES> <WHILE> <APARENTESES>  Exp() <FPARENTESES>)
  | (<RETURN> Exp())
  | (<PRINT> <APARENTESES> Exp() <FPARENTESES>)

}


// EXP -> num | id

void Exp ():
{}
{
  (<APARENTESES> Exp() <OP> Exp() <FPARENTESES>)
  | Fator()
}

void ListaExp():
{}
{
  Exp() ListaExpL()
}

void ListaExpL():
{}
{
    (<VIRGULA> Exp() ListaExpL())?
}

void Fator():
{}
{
  <TOKEN_ID> FatorL()
  | <TOKEN_NUMLITERAL>
  | <TRUE>
  | <FALSE> 
}

void FatorL():
{}
{
   (<TOKEN_ID> <APARENTESES> ListaExp() <FPARENTESES>)?
}

void Func():
{}
{
  (<FUNC> <TIPO> <TOKEN_ID> <APARENTESES> (ListArg())? <FPARENTESES> <ACHAVES> VarDecl() Comandos() <FCHAVES>)+
}

void ListArg():
{}
{
  <TIPO><TOKEN_ID> (<VIRGULA> ListArg())?
}