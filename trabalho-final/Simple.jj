PARSER_BEGIN(Lugosi)
import java.io.*;
import java.util.ArrayList;

public class Lugosi {

  public static void main(String args[]) throws ParseException,IOException {

 Lugosi parser = new Lugosi(new FileInputStream(args[0]));
 LugosiTree tree = parser.Lugosi();
 print(tree);

  }

  public static void print(LugosiTree arv)
   {

    System.out.println("main(){");
    printVars(arv.vars);
    printComandos(arv.comandos);
    System.out.println("}");

   }

   public static void printVars(ArrayList<Var> vars)
   {
       for (Var v : vars) {
           System.out.print("var");
           if ( (v).type instanceof IntT ) {
                System.out.print(" int ");
           } else if ( (v).type instanceof BoolT ) {
               System.out.print(" bool ");
           } else if ( (v).type instanceof FloatT ) {
               System.out.print(" float ");
           } else if ( (v).type instanceof VoidT ) {
               System.out.print(" void ");
           }
           System.out.println("" + ((Id)v.id).id + ";");
       }
   }

  public static void printComandos(ArrayList<Comando> comandos)
  {
     for (Comando c : comandos) {
           if (c instanceof Print)
            {
                System.out.println("print(" + stringExp(((Print)c).exp )+ ");");
            }
            else if (c instanceof Atrib) {
                System.out.println(((Atrib)c).id + " := " + stringExp(((Atrib)c).exp) + ";");
            }
            else if (c instanceof Return) {
                System.out.println("return " + stringExp(((Return)c).exp )+ ";");
            }
            else if (c instanceof If) {
                System.out.println("if ( " + stringExp(((If)c).exp ) + " ) {");
                printComandos(((If)c).comandos);
                System.out.println("}");
            }
            else if (c instanceof Do) {
                System.out.println("do { ");
                printComandos(((Do)c).comandos);
                System.out.println("} while ( " + stringExp(((Do)c).exp ) + " );");;
            }
            else if (c instanceof While) {
                System.out.println("while ( " + stringExp(((While)c).exp ) + " ) do {");
                printComandos(((While)c).comandos);
                System.out.println("}");
            }
        }

  }

  public static String stringExp(Exp e)
       {
          String temp = "";
          if (e instanceof FatorNum) {
            return ("" + (((FatorNum) e).num).valor);
          } else if (e instanceof FatorId) {
            return ("" + (((FatorId) e).id).id);
          }
          if (e instanceof ExpOpExp) {
            temp += "( ";
            if ((((ExpOpExp) e).exp1) instanceof ExpOpExp) {
              temp += stringExp((((ExpOpExp) e).exp1));
            } else if ((((ExpOpExp) e).exp1) instanceof FatorNum) {
              temp += "" + ((FatorNum)(((ExpOpExp) e).exp1)).num.valor;
            } else if ((((ExpOpExp) e).exp1) instanceof FatorId) {
              temp += "" + (((FatorId) e).id).id;
            }
            temp += " " + ((ExpOpExp) e).op + " ";
            if ((((ExpOpExp) e).exp2) instanceof ExpOpExp) {
              temp += stringExp((((ExpOpExp) e).exp2));
            } else if ((((ExpOpExp) e).exp2) instanceof FatorNum) {
              temp += " " + ((FatorNum)(((ExpOpExp) e).exp2)).num.valor;
            } else if ((((ExpOpExp) e).exp2) instanceof FatorId) {
              temp += "" + (((FatorId) e).id).id + " ";
            }
            return temp + " )";
        }
            return "a";
       }

   public static String printFator(Fator f) {
        System.out.println("aqui");
        return "a";
//      if(f instanceof FatorId) {
//          return  "" + (((Id)f.id).id);
//      } else if (f instanceof FatorNum) {
//          return "" + (((Num)f.num).valor);
//      }
   }
}

class LugosiTree{
   ArrayList<Var> vars;
   ArrayList<Comando> comandos;

   LugosiTree(ArrayList vars, ArrayList comandos)
   {
       this.vars = vars;
       this.comandos=comandos;
   }
}

class Tipo {}

class IntT extends Tipo {}
class BoolT extends Tipo {}
class FloatT extends Tipo {}
class VoidT extends Tipo {}


class Comando{}

class Atrib extends Comando{
   String id;
   Exp exp;
  
   Atrib (String id, Exp exp)
   {
    this.id=id;
    this.exp=exp;
   }
}

class Return extends Comando{
   Exp exp;

   Return(Exp exp)
   {this.exp = exp;}
}

class If extends Comando{
   Exp exp;
   ArrayList<Comando> comandos;

   If (Exp exp, ArrayList<Comando> comandos)
   {
       this.exp = exp;
       this.comandos = comandos;
   }
}

class While extends Comando{
   Exp exp;
   ArrayList<Comando> comandos;

   While (Exp exp, ArrayList<Comando> comandos)
   {
       this.exp = exp;
       this.comandos = comandos;
   }
}

class Do extends Comando{
   Exp exp;
   ArrayList<Comando> comandos;

   Do (Exp exp, ArrayList<Comando> comandos)
   {
       this.exp = exp;
       this.comandos = comandos;
   }
}

class Print extends Comando{
   Exp exp;
   Print(Exp exp)
   {this.exp = exp;}
}

class Exp{}

class ExpOpExp extends Exp {
	Exp exp1;
	String op;
	Exp exp2;

	ExpOpExp (Exp exp1, String op, Exp exp2) {
		this.exp1 = exp1;
		this.op = op;
		this.exp2 = exp2;
	}
}

class Fator extends Exp {}

//Fator = id (lista)
class FatorIdLista extends Fator {
	Id id;
	ArrayList<Exp> exp;

	FatorIdLista (Id id, ArrayList<Exp> exp){
		this.id = id;
		this.exp = exp;
	}
}

//Fator = id
class FatorId extends Fator {
	Id id;

	FatorId (Id id){
		this.id = id;
	}
}

class FatorNum extends Fator {
	Num num;

	FatorNum (Num num) {
		this.num = num;
	}
}

//Fator = bool
class FatorBool extends Fator {
	Bool valor;

	FatorBool (Bool valor){
		this.valor = valor;
	}
}

//ID
class Id {
	String id;

	Id (String id) {
		this.id = id;
	}
}

//NUM
class Num {
	String valor;

	Num (String valor)
	{this.valor=valor;}
}

class Bool {
	String valor;
	public Bool(String valor){this.valor=valor;}
}

class Float {
	String valor;
	public Float(String valor){this.valor=valor;}
}

class Void {
	String valor;
	public Void(String valor){this.valor= "void";}
}

class Var {
	Tipo type;
	Id id;

    Var(Tipo type, Id id){
		this.type = type;
		this.id = id;
	}
}




PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENTESES:"(">
| <FPARENTESES:")">
| <PRINT: "print">
| <ATRIB: ":=">
| <RETURN: "return">
| <IF: "if">
| <WHILE: "while">
| <DO: "do">
| <PV: ";">
| <VAR: "var">
| <BOOL: "bool">
| <INT: "int">
| <VOID: "void">
| <FLOAT: "float">
| <TRUE: "true">
| <FALSE: "false">
| <VIRGULA: ",">
}

TOKEN :
{
  <ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])*(("_")*( ["a"-"z","A"-"Z","0"-"9"])+)*>
 | <NUM:(["0"-"9"])+ ("."(["0"-"9"])+ )? ("E" ("+" | "-")? (["0"-"9"])+)?>
 | <OP: ( "+" | "-" | "*" | "/" | "&&" | "||" | "<" | ">" | "==")>

}


// Lugosi -> "main" "{" COMANDOS  "}"

LugosiTree Lugosi () :
{
 ArrayList vars = new ArrayList();
 ArrayList comandos = new ArrayList();
}
{

<MAIN> <ACHAVES> varDecl2(vars) Comandos(comandos) <FCHAVES>
<EOF> 
 {return new LugosiTree(vars, comandos);}
}

void varDecl2(ArrayList lista_var):
{ Tipo type=null; Id id=null; Token t;}
{
	( <VAR> { type=Tipo(); } t=<ID> { id = new Id(t.image); } <PV> { lista_var.add(new Var(type, id)); } )*
}

ArrayList<Var> varDecl():
{ ArrayList<Var> lista_var = new ArrayList<Var>(); Tipo type=null; Id id=null; Token t;}
{
	( <VAR> { type=Tipo(); } t=<ID> { id = new Id(t.image); } <PV> { lista_var.add(new Var(type, id)); } )*
	{return lista_var;}
}

Tipo Tipo():
{Tipo type = null; Token t;}
{
	(
		  (t=<INT>  { type = new IntT(); })
		| (t=<BOOL> { type = new BoolT(); })
		| (t=<VOID> { type = new VoidT(); })
		| (t=<FLOAT> { type = new FloatT(); })
	)
	{return type;}
}

void Comandos (ArrayList comandos) :
{Comando c;}
{

 c=Com() {comandos.add(c);} <PV>  ComandosL(comandos)

}

// COMANDOS'->   COM ";" COMANDOS' | epsilon

void ComandosL (ArrayList comandos) :
{Comando c;}
{

 ( c=Com()  {comandos.add(c);} <PV>  ComandosL(comandos))?

}

// COMANDOS -> COM ";"  COMANDOS'

ArrayList<Comando> ComandosSeq():
{    ArrayList<Comando> cs = new ArrayList<Comando>(); Comando c;}
{
	 (c = Com() <PV> {cs.add(c);})*

	 {return cs;}
}


// COM -> id ":=" EXP | "print" "(" EXP ")"

Comando Com () :
{Token id=null; Exp e=null; Comando c=null; Comando result=null; ArrayList<Comando> cs;}
{

  (id=<ID> <ATRIB> e=Exp() {result = new Atrib(id.image,e);}
  | (<RETURN> e = Exp() {result = new Return(e);} )
  | <PRINT> <APARENTESES> e=Exp() <FPARENTESES> {result = new Print(e);}
  | <IF> <APARENTESES> e=Exp() <FPARENTESES> <ACHAVES> cs=ComandosSeq() <FCHAVES> {result = new If(e, cs);}
  | <WHILE> <APARENTESES> e=Exp() <FPARENTESES> <DO> <ACHAVES>  cs=ComandosSeq() <FCHAVES> {result = new While(e, cs);}
  | <DO> <ACHAVES> cs=ComandosSeq() <FCHAVES> <WHILE> <APARENTESES>  e=Exp() <FPARENTESES> {result = new Do(e, cs);})
  
  {return result;} 

}

// EXP -> num | id

Exp Exp () :
{Exp result;Exp e1=null;Exp e2=null;Token t;}
{
   ((<APARENTESES> e1=Exp() t=<OP> e2=Exp() <FPARENTESES> {result = new ExpOpExp(e1,t.image,e2);}) | (result=Fator()))

    {return result;}

}

Fator Fator():
{Fator expF=null;Id id=null;ArrayList<Exp> l = new ArrayList<Exp>();Token t;}
{
	(
		(t=<ID> {id=new Id(t.image);} ( <APARENTESES> (l=ListaExp())  <FPARENTESES>)? {expF = new FatorIdLista(id,l);})
		| (t=<NUM> {expF = new FatorNum(new Num(t.image));})
		| (t=<TRUE>   {expF = new FatorBool(new Bool(t.image));})
		| (t=<FALSE>  {expF = new FatorBool(new Bool(t.image));})
	)

	{return expF;}
}



ArrayList<Exp> ListaExp():
{ArrayList<Exp> result = new ArrayList<Exp>();}
{
	({result.add(Exp());} (<VIRGULA> {result.add(Exp());})*)

	{return result;}
}