PARSER_BEGIN(Lugosi)
import java.io.*;
import java.util.ArrayList;

public class Lugosi {

  public static void main(String args[]) throws ParseException,IOException {

 Lugosi parser = new Lugosi(new FileInputStream(args[0]));
 LugosiTree tree = parser.Lugosi();
 print(tree);

  }

  public static void print(LugosiTree arv)
   {
      printMain(arv.main);
      printFunctions(arv.functions);
   }

   public static void printMain(Main main)
   {
      System.out.println("main() {");
      printVars(main.vars);
      printComandos(main.comandos);
      System.out.println("}");
   }

  public static void printFunctions(ArrayList<Func> functions)
  {
      int temp = 0;
     for (Func f : functions) {
        System.out.print("function");
        if ( f.returnType instanceof IntT ) {
             System.out.print(" int ");
        } else if ( f.returnType instanceof BoolT ) {
            System.out.print(" bool ");
        } else if ( f.returnType instanceof FloatT ) {
            System.out.print(" float ");
        } else if ( f.returnType instanceof VoidT ) {
            System.out.print(" void ");
        }
        System.out.print(f.name + "(");
        printArgs(f.args);
        System.out.println(" ) {");
        printVars(f.vars);
        printComandos(f.comandos);
        System.out.println("}");
     }
  }

  public static void printArgs(ArrayList<Var> vars)
     {
         int temp = 0;
         for (Var v : vars) {
             temp++;
             if ((v).type instanceof IntT ) {
                  System.out.print(" int ");
             } else if ( (v).type instanceof BoolT ) {
                 System.out.print(" bool ");
             } else if ( (v).type instanceof FloatT ) {
                 System.out.print(" float ");
             } else if ( (v).type instanceof VoidT ) {
                 System.out.print(" void ");
             }
             System.out.print("" + ((Id)v.id).id);
             if (temp != vars.size()) {
                 System.out.print(",");
             }
         }
     }

   public static void printVars(ArrayList<Var> vars)
   {
       for (Var v : vars) {
           System.out.print("var");
           if ( (v).type instanceof IntT ) {
                System.out.print(" int ");
           } else if ( (v).type instanceof BoolT ) {
               System.out.print(" bool ");
           } else if ( (v).type instanceof FloatT ) {
               System.out.print(" float ");
           } else if ( (v).type instanceof VoidT ) {
               System.out.print(" void ");
           }
           System.out.println("" + ((Id)v.id).id + ";");
       }
   }

  public static void printComandos(ArrayList<Comando> comandos)
  {
     for (Comando c : comandos) {
           if (c instanceof Print)
            {
                System.out.println("print(" + stringExp(((Print)c).exp )+ ");");
            }
            else if (c instanceof Atrib) {
                System.out.println(((Atrib)c).id + " := " + stringExp(((Atrib)c).exp) + ";");
            }
            else if (c instanceof Return) {
                System.out.println("return " + stringExp(((Return)c).exp )+ ";");
            }
            else if (c instanceof If) {
                System.out.println("if ( " + stringExp(((If)c).exp ) + " ) {");
                printComandos(((If)c).comandos);
                System.out.println("}");
            }
            else if (c instanceof Do) {
                System.out.println("do { ");
                printComandos(((Do)c).comandos);
                System.out.println("} while ( " + stringExp(((Do)c).exp ) + " );");;
            }
            else if (c instanceof While) {
                System.out.println("while ( " + stringExp(((While)c).exp ) + " ) do {");
                printComandos(((While)c).comandos);
                System.out.println("}");
            }
            else if (c instanceof CallFunction) {
                int temp = 0;
                System.out.print(((CallFunction) c).id.id + "(");
                for (Exp arg : ((CallFunction) c).args ) {
                    temp++;
                    System.out.print(" " + stringExp(arg));
                    if (temp != ((CallFunction) c).args.size()) {
                        System.out.print(",");
                    }
                }
                System.out.print(" )\n");

            }
        }

  }

  public static String stringExp(Exp e)
       {
          String temp = "";

          if (e instanceof FatorNum) {

            return ("" + (((FatorNum) e).num).valor);
          } else if (e instanceof FatorIdLista) {
              return ("" + (((FatorIdLista) e).id).id);
          }
          if (e instanceof ExpOpExp) {
            temp += "( ";
            if ((((ExpOpExp) e).exp1) instanceof ExpOpExp) {
              temp += stringExp((((ExpOpExp) e).exp1));
            } else if ((((ExpOpExp) e).exp1) instanceof FatorNum) {
              temp += "" + ((FatorNum)(((ExpOpExp) e).exp1)).num.valor;
            } else if ((((ExpOpExp) e).exp1) instanceof FatorIdLista) {
              temp += ((FatorIdLista)((Fator)((((ExpOpExp) e).exp1)))).id.id;
            }
            temp += " " + ((ExpOpExp) e).op + " ";
            if ((((ExpOpExp) e).exp2) instanceof ExpOpExp) {
              temp += stringExp((((ExpOpExp) e).exp2));
            } else if ((((ExpOpExp) e).exp2) instanceof FatorNum) {
              temp += " " + ((FatorNum)(((ExpOpExp) e).exp2)).num.valor;
            } else if ((((ExpOpExp) e).exp2) instanceof FatorIdLista) {
              temp += ((FatorIdLista)((Fator)((((ExpOpExp) e).exp1)))).id.id;
            }
            return temp + " )";
        }
          return "AQUI";
       }
}

class LugosiTree{
    Main main;
	ArrayList<Func> functions;

   LugosiTree(Main main, ArrayList<Func> functions)
   {
		this.main = main;
		this.functions = new ArrayList(functions);
   }
}

// ------------------ FUNCTION

class Func {

	Tipo returnType;
	String name;
	ArrayList<Var> args;
	ArrayList<Var> vars;
	ArrayList<Comando> comandos;

	Func(Tipo returnType, String name, ArrayList<Var> args, ArrayList<Var> vars, ArrayList<Comando> comandos){
		this.returnType = returnType;
		this.name = name;
		this.args = new ArrayList(args);
		this.vars = new ArrayList(vars);
		this.comandos = new ArrayList(comandos);
	}
}

class Main extends Func {
	Main(ArrayList<Var> vars, ArrayList<Comando> commands){
		super(
			new NoneT(),
			"main",
			new ArrayList(),
			new ArrayList(vars),
			new ArrayList(commands)
		);
	}
}

// ------------------ TYPES
class Tipo {}

class IntT extends Tipo {}
class BoolT extends Tipo {}
class FloatT extends Tipo {}
class VoidT extends Tipo {}
class NoneT extends Tipo {}

// ------------------ Comandos
class Comando{}

class Atrib extends Comando{
   String id;
   Exp exp;

   Atrib (String id, Exp exp)
   {
    this.id=id;
    this.exp=exp;
   }
}

class Return extends Comando{
   Exp exp;

   Return(Exp exp)
   {this.exp = exp;}
}

class If extends Comando{
   Exp exp;
   ArrayList<Comando> comandos;

   If (Exp exp, ArrayList<Comando> comandos)
   {
       this.exp = exp;
       this.comandos = comandos;
   }
}

class While extends Comando{
   Exp exp;
   ArrayList<Comando> comandos;

   While (Exp exp, ArrayList<Comando> comandos)
   {
       this.exp = exp;
       this.comandos = comandos;
   }
}

class Do extends Comando{
   Exp exp;
   ArrayList<Comando> comandos;

   Do (Exp exp, ArrayList<Comando> comandos)
   {
       this.exp = exp;
       this.comandos = comandos;
   }
}

class Print extends Comando{
   Exp exp;
   Print(Exp exp)
   {this.exp = exp;}
}

class CallFunction extends Comando {
	Id id;
	ArrayList<Exp> args;

	CallFunction(Id id, ArrayList<Exp> args){
		this.id = id;
		this.args = args;
	}
}

// ------------------ Exp
class Exp{}

class ExpOpExp extends Exp {
	Exp exp1;
	String op;
	Exp exp2;

	ExpOpExp (Exp exp1, String op, Exp exp2) {
		this.exp1 = exp1;
		this.op = op;
		this.exp2 = exp2;
	}
}

class Fator extends Exp {}

//Fator = id (lista)
class FatorIdLista extends Fator {
	Id id;
	ArrayList<Exp> exp;

	FatorIdLista (Id id, ArrayList<Exp> exp){
		this.id = id;
		this.exp = exp;
	}
}

//Fator = id
class FatorId extends Fator {
	Id id;

	FatorId (Id id){
		this.id = id;
	}
}

class FatorNum extends Fator {
	Num num;

	FatorNum (Num num) {
		this.num = num;
	}
}

//Fator = bool
class FatorBool extends Fator {
	Bool valor;

	FatorBool (Bool valor){
		this.valor = valor;
	}
}

//ID
class Id {
	String id;

	Id (String id) {
		this.id = id;
	}
}

//NUM
class Num {
	String valor;

	Num (String valor)
	{this.valor=valor;}
}

class Bool {
	String valor;
	public Bool(String valor){this.valor=valor;}
}

class Float {
	String valor;
	public Float(String valor){this.valor=valor;}
}

class Void {
	String valor;
	public Void(String valor){this.valor= "void";}
}

class Var {
	Tipo type;
	Id id;

    Var(Tipo type, Id id){
		this.type = type;
		this.id = id;
	}
}




PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENTESES:"(">
| <FPARENTESES:")">
| <PRINT: "print">
| <ATRIB: ":=">
| <RETURN: "return">
| <IF: "if">
| <WHILE: "while">
| <DO: "do">
| <PV: ";">
| <VAR: "var">
| <BOOL: "bool">
| <INT: "int">
| <VOID: "void">
| <FLOAT: "float">
| <TRUE: "true">
| <FALSE: "false">
| <VIRGULA: ",">
| <FUNC: "function">
}

TOKEN :
{
  <ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])*(("_")*( ["a"-"z","A"-"Z","0"-"9"])+)*>
 | <NUM:(["0"-"9"])+ ("."(["0"-"9"])+ )? ("E" ("+" | "-")? (["0"-"9"])+)?>
 | <OP: ( "+" | "-" | "*" | "/" | "&&" | "||" | "<" | ">" | "==" | "!=")>

}


// Lugosi -> "main" "{" COMANDOS  "}"

void varDecl2(ArrayList lista_var):
{ Tipo type=null; Id id=null; Token t;}
{
	( <VAR> { type=Tipo(); } t=<ID> { id = new Id(t.image); } <PV> { lista_var.add(new Var(type, id)); } )*
}

ArrayList<Var> varDecl():
{ ArrayList<Var> lista_var = new ArrayList<Var>(); Tipo type=null; Id id=null; Token t;}
{
	( <VAR> { type=Tipo(); } t=<ID> { id = new Id(t.image); } <PV> { lista_var.add(new Var(type, id)); } )*
	{return lista_var;}
}

//ArrayList<Var> argList():
//{ ArrayList<Var> lista_args = new ArrayList<Var>(); Tipo type=null; Token t;}
//{
//
//    (
//        {type = Tipo();} t=<ID> { lista_args.add(new Var(type, new Id(t.image)));}
//    )
//
//    {return lista_args;}
//}

ArrayList<Var> argList (): {
	ArrayList<Var> args = new ArrayList<Var>();
	Var auxArg = null;
} {
	auxArg = Arg() {args.add(auxArg);} (<VIRGULA> auxArg = Arg() {args.add(auxArg);})*
		{return args;}
}

Var Arg (): {
	Tipo type;
	Token t;
} {
	{type = Tipo();} t=<ID>
    { return new Var(type, new Id(t.image)); }
}

Tipo Tipo():
{Tipo type = null; Token t;}
{
	(
		  (t=<INT>  { type = new IntT(); })
		| (t=<BOOL> { type = new BoolT(); })
		| (t=<VOID> { type = new VoidT(); })
		| (t=<FLOAT> { type = new FloatT(); })
	)
	{return type;}
}

void Comandos (ArrayList comandos) :
{Comando c;}
{

 c=Com() {comandos.add(c);} <PV>  ComandosL(comandos)

}

// COMANDOS'->   COM ";" COMANDOS' | epsilon

void ComandosL (ArrayList comandos) :
{Comando c;}
{

 ( c=Com()  {comandos.add(c);} <PV>  ComandosL(comandos))?

}

// COMANDOS -> COM ";"  COMANDOS'

ArrayList<Comando> ComandosSeq():
{    ArrayList<Comando> cs = new ArrayList<Comando>(); Comando c;}
{
	 (c = Com() <PV> {cs.add(c);})*

	 {return cs;}
}


// COM -> id ":=" EXP | "print" "(" EXP ")"

Comando Com () :
{Token id=null; Exp e=null; Comando c=null; Comando result=null; ArrayList<Comando> cs; ArrayList<Exp> es;}
{
    (
        id=<ID> (
              (<ATRIB> e=Exp() { result = new Atrib(id.image, e); } )
            | (<APARENTESES>  es=ListaExp() <FPARENTESES> { result = new CallFunction(new Id(id.image), es); })
        )

        | (<RETURN> e = Exp() {result = new Return(e);} )
        | <PRINT> <APARENTESES> e=Exp() <FPARENTESES> {result = new Print(e);}
        | <IF> <APARENTESES> e=Exp() <FPARENTESES> <ACHAVES> cs=ComandosSeq() <FCHAVES> {result = new If(e, cs);}
        | <WHILE> <APARENTESES> e=Exp() <FPARENTESES> <DO> <ACHAVES>  cs=ComandosSeq() <FCHAVES> {result = new While(e, cs);}
| <DO> <ACHAVES> cs=ComandosSeq() <FCHAVES> <WHILE> <APARENTESES>  e=Exp() <FPARENTESES> {result = new Do(e, cs);}
    )
  
  {return result;} 

}

// EXP -> num | id

Exp Exp () :
{Exp result;Exp e1=null;Exp e2=null;Token t;}
{
   ((<APARENTESES> e1=Exp() t=<OP> e2=Exp() <FPARENTESES> {result = new ExpOpExp(e1,t.image,e2);}) | (result=Fator()))

    {return result;}

}

Fator Fator():
{Fator expF=null;Id id=null;ArrayList<Exp> l = new ArrayList<Exp>();Token t;}
{
	(
		(t=<ID> {id=new Id(t.image);} ( <APARENTESES> (l=ListaExp())  <FPARENTESES>)? {expF = new FatorIdLista(id,l);})
		| (t=<NUM> {expF = new FatorNum(new Num(t.image));})
		| (t=<TRUE>   {expF = new FatorBool(new Bool(t.image));})
		| (t=<FALSE>  {expF = new FatorBool(new Bool(t.image));})
	)

	{return expF;}
}

ArrayList<Exp> ListaExp():
{ArrayList<Exp> result = new ArrayList<Exp>();}
{
	({result.add(Exp());} (<VIRGULA> {result.add(Exp());})*)

	{return result;}
}

ArrayList<Func> Func():
{ ArrayList<Func> functions = new ArrayList<Func>(); Tipo returnType; String name;  ArrayList<Var> args; ArrayList<Var> vars; ArrayList<Comando> comandos; Token t; }
{

	(
	    <FUNC> {returnType = Tipo();} t=<ID> <APARENTESES> { args = argList(); } <FPARENTESES> <ACHAVES>
		{vars = varDecl(); comandos = ComandosSeq();}  <FCHAVES> {functions.add(new Func(returnType, t.image, args, vars, comandos));}
	)*

	{return functions;}
}

Main Main ():
{ArrayList<Var> lista_var; ArrayList<Comando> comandos;}
{
 <MAIN> <ACHAVES>
     { lista_var = varDecl(); }
     { comandos = ComandosSeq(); }
 <FCHAVES>

 {return (new Main (lista_var, comandos));}

}

LugosiTree Lugosi () :
{
 Main main;
 ArrayList<Func> functions;
}
{
    (main = Main())
    (functions = Func())
    <EOF>

    {
        return new LugosiTree(main, functions);
    }
}
